%{
#include "tree.h"
#include <stdlib.h>
#include <stdio.h>
#include <assert.h>

static int reg =0;
int getreg(void){
	return reg++;
}

%}

%term TYPE_VAR=0 TYPE_CONST=1 TYPE_ADD=2 TYPE_SUB=3 TYPE_MUL=4 TYPE_ARRAY=5
%start Stats
%%
Stats: reg	# 1 # printf("\treturn r%d\n", bnode->reg);
reg: TYPE_SUB(reg) # 1 # bnode->reg = getreg(); printf("\tr%d = -r%d\n", bnode->reg, RIGHT_CHILD(bnode)->reg);
reg: TYPE_ADD(reg, reg) # 1 # bnode->reg=getreg(); printf("\tr%d = r%d + r%d\n", bnode->reg, LEFT_CHILD(bnode)->reg, RIGHT_CHILD(bnode)->reg);
reg: TYPE_MUL(reg, reg) # 1 # bnode->reg=getreg(); printf("\tr%d = r%d * r%d\n", bnode->reg, LEFT_CHILD(bnode)->reg, RIGHT_CHILD(bnode)->reg);
reg: VAR # 1 # bnode->reg=getreg(); printf("\tr%d = var %s\n", bnode->reg, bnode->name);
reg: CONST # 1 # bnode->reg=getreg(); printf("\tr%d = cons %d\n", bnode->reg, bnode->const_num); 
reg: constant # 1 # bnode->reg=getreg(); printf("\tr%d = cons %d\n", bnode->reg, bnode->const_num);
constant: TYPE_ADD(constant, constant) # 0 # bnode->const_num = LEFT_CHILD(bnode)->const_num + RIGHT_CHILD(bnode)->const_num;
constant: TYPE_MUL(constant, constant) # 0 # bnode->const_num = LEFT_CHILD(bnode)->const_num * RIGHT_CHILD(bnode)->const_num;
constant: TYPE_CONST # 0 # bnode->const_num = bnode->const_num;
constant: TYPE_SUB(constant)  # 0 # bnode->const_num = -RIGHT_CHILD(bnode)->const_num; 
%%
