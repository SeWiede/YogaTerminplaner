%{
#include "tree.h"
#include <stdlib.h>
#include <stdio.h>
#include <assert.h>
#include "util.h"


static void MUL2_CONST_REG(Tree bnode) {
	bnode->reg = RIGHT_CHILD(bnode)->reg;
	printf("\timulq $%d, %s\n", LEFT_CHILD(bnode)->const_num, toRegister(RIGHT_CHILD(bnode)->reg));
}

static void MUL2_REG_CONST(Tree bnode) {
	bnode->reg = LEFT_CHILD(bnode)->reg;
	printf("\timulq $%d, %s\n", RIGHT_CHILD(bnode)->const_num, toRegister(LEFT_CHILD(bnode)->reg));
}
static void MUL2(Tree bnode) {
	bnode->reg=RIGHT_CHILD(bnode)->reg;
	printf("\timulq %s, %s\n", toRegister(LEFT_CHILD(bnode)->reg), toRegister(RIGHT_CHILD(bnode)->reg));
	freeReg(LEFT_CHILD(bnode)->reg);
}

static void MUL2_NOFREE(Tree bnode) {
	bnode->reg=RIGHT_CHILD(bnode)->reg;
	printf("\timulq %s, %s\n", toRegister(LEFT_CHILD(bnode)->reg), toRegister(RIGHT_CHILD(bnode)->reg));
}

static void MUL(Tree bnode){
	int raxused = checkRegister(rax);
	int rdxused = checkRegister(rdx);

	if(RIGHT_CHILD(bnode)->reg != rdx) 
		bnode->reg=RIGHT_CHILD(bnode)->reg; 
	else
		bnode->reg=getreg();

	if(raxused != 1)
		printf("\tpush %rax\n");
	if(rdxused != 1)
		printf("\tpush %rdx\n"); 
	if(LEFT_CHILD(bnode)->reg != rax)
		printf("\tmovq %s, %rax\n", toRegister(LEFT_CHILD(bnode)->reg)); 
	printf("\timul %s\n", toRegister(RIGHT_CHILD(bnode)->reg)); 
	printf("\tmovq %rax, %s\n", toRegister(bnode->reg)); 
	if(rdxused != 1)
		printf("\tpop %rdx\n");
	 if(raxused != 1)
		printf("\tpop %rax\n"); 
	

	freeReg(LEFT_CHILD(bnode)->reg);

}
%}

%term TYPE_VAR=0 TYPE_CONST=1 TYPE_ADD=2 TYPE_SUB=3 TYPE_MUL=4 TYPE_ARRAY=5
%start Stats
%%
Stats: reg	# 1 #if(bnode->reg != rax) printf("\tmovq %s, %rax\n", toRegister(bnode->reg));/* printf("\tpop %rbx\n \tpop %rbp\n \tpop %r12\n \tpop %r13\n \tpop %r14\n \tpop %r15\n");*/ freeAllRegs(); printf("\tret\n"); 
reg: TYPE_SUB(reg) # 1 # bnode->reg = LEFT_CHILD(bnode)->reg; printf("\tneg %s\n", toRegister(LEFT_CHILD(bnode)->reg));
reg: TYPE_ADD(reg, reg) # 1 # bnode->reg=RIGHT_CHILD(bnode)->reg; printf("\taddq %s, %s\n", toRegister(LEFT_CHILD(bnode)->reg), toRegister(RIGHT_CHILD(bnode)->reg)); freeReg(LEFT_CHILD(bnode)->reg);
reg: TYPE_MUL(reg, reg) # 1 # MUL2(bnode);
reg: TYPE_VAR # 1 # bnode->reg=getreg(); printf("\tmovq %s, %s\n", toRegister(getregForVariable(bnode->name)), toRegister(bnode->reg));
reg: TYPE_CONST # 1 # bnode->reg=getreg(); printf("\tmovq $%d, %s\n", bnode->const_num, toRegister(bnode->reg)); 
reg: constant # 1 # bnode->reg=getreg(); printf("\tmovq $%d, %s\n", bnode->const_num, toRegister(bnode->reg));
constant: TYPE_ADD(constant, constant) # 0 # bnode->const_num = LEFT_CHILD(bnode)->const_num + RIGHT_CHILD(bnode)->const_num;
constant: TYPE_MUL(constant, constant) # 0 # bnode->const_num = LEFT_CHILD(bnode)->const_num * RIGHT_CHILD(bnode)->const_num;
constant: TYPE_CONST # 0 # bnode->const_num = bnode->const_num;
constant: TYPE_SUB(constant)  # 0 # bnode->const_num = -LEFT_CHILD(bnode)->const_num;
reg: TYPE_ADD(reg, constant) # 1 # bnode->reg=LEFT_CHILD(bnode)->reg; printf("\taddq $%d, %s\n", RIGHT_CHILD(bnode)->const_num, toRegister(LEFT_CHILD(bnode)->reg));
reg: TYPE_ADD(constant, reg) # 1 #  bnode->reg=RIGHT_CHILD(bnode)->reg; printf("\taddq $%d, %s\n", LEFT_CHILD(bnode)->const_num, toRegister(RIGHT_CHILD(bnode)->reg));
left: TYPE_VAR # 1 # bnode->reg=getregForVariable(bnode->name);
reg: TYPE_ADD(left, reg) # 1# bnode->reg=RIGHT_CHILD(bnode)->reg; printf("\taddq %s, %s\n", toRegister(LEFT_CHILD(bnode)->reg), toRegister(RIGHT_CHILD(bnode)->reg));
array: TYPE_ARRAY(reg, reg) # 1 # bnode->array_string = malloc(50); sprintf(bnode->array_string, "0(%s, %s, 8)", toRegister(LEFT_CHILD(bnode)->reg), toRegister(RIGHT_CHILD(bnode)->reg));
array: TYPE_ARRAY(reg, constant) # 1 # bnode->array_string = malloc(50); sprintf(bnode->array_string, "%d(%s)", 8*RIGHT_CHILD(bnode)->const_num, toRegister(LEFT_CHILD(bnode)->reg));
array: TYPE_ARRAY(constant, reg) # 1 # bnode->array_string = malloc(50); sprintf(bnode->array_string, "%d(,%s, 8)", LEFT_CHILD(bnode)->const_num, toRegister(RIGHT_CHILD(bnode)->reg));
array: TYPE_ARRAY(constant, constant) # 1 # bnode->array_string = malloc(50); sprintf(bnode->array_string, "%d(%s)", LEFT_CHILD(bnode)->const_num + RIGHT_CHILD(bnode)->const_num);
reg: TYPE_ADD(array, reg) # 1 # bnode->reg = RIGHT_CHILD(bnode)->reg; printf("\taddq %s, %s\n", LEFT_CHILD(bnode)->array_string, toRegister(RIGHT_CHILD(bnode)->reg)); free(LEFT_CHILD(bnode)->array_string);
reg: TYPE_ADD(reg, array) # 1 # bnode->reg = LEFT_CHILD(bnode)->reg; printf("\taddq %s, %s\n", RIGHT_CHILD(bnode)->array_string, toRegister(LEFT_CHILD(bnode)->reg)); free(RIGHT_CHILD(bnode)->array_string);
reg: TYPE_ADD(array, array) # 1 # bnode->reg = getreg(); printf("\tmovq %s, %s\n", LEFT_CHILD(bnode)->array_string ,toRegister(bnode->reg)); printf("\taddq %s, %s\n", RIGHT_CHILD(bnode)->array_string, toRegister(bnode->reg));free(LEFT_CHILD(bnode)->array_string);free(RIGHT_CHILD(bnode)->array_string);
reg: array # 1 # bnode->reg = getreg(); printf("\tmovq %s, %s\n", bnode->array_string, toRegister(bnode->reg)); free(bnode->array_string);
reg: TYPE_MUL(constant, reg) # 1 # MUL2_CONST_REG(bnode);
reg: TYPE_MUL(reg, constant) # 1 # MUL2_REG_CONST(bnode);
reg: TYPE_MUL(left, reg) # 1 # MUL2_NOFREE(bnode);
reg: TYPE_MUL(array, reg) # 1 # bnode->reg = LEFT_CHILD(bnode)->reg; printf("\timulq %s, %s\n", RIGHT_CHILD(bnode)->array_string, toRegister(LEFT_CHILD(bnode)->reg)); free(RIGHT_CHILD(bnode)->array_string);
reg: TYPE_MUL(reg, array) # 1 # bnode->reg = LEFT_CHILD(bnode)->reg; printf("\timulq %s, %s\n", RIGHT_CHILD(bnode)->array_string, toRegister(LEFT_CHILD(bnode)->reg)); free(RIGHT_CHILD(bnode)->array_string);
reg: TYPE_MUL(array, array) # 1 # bnode->reg = getreg(); printf("\tmovq %s, %s\n", LEFT_CHILD(bnode)->array_string ,toRegister(bnode->reg)); printf("\timulq %s, %s\n", RIGHT_CHILD(bnode)->array_string, toRegister(bnode->reg));free(LEFT_CHILD(bnode)->array_string);free(RIGHT_CHILD(bnode)->array_string);

%%
